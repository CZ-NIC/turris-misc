#!/bin/sh

base_folder=/tmp/user_notify
date_cmd="/bin/busybox date"
default_lang="en"

if [ "$1" = "-d" ] ; then
	base_folder="$2"
	shift 2
fi

mkdir -p "$base_folder"

locker_stamp="$base_folder/.locked"
msg_file="$locker_stamp/msg.mail"
msmtp_cfg_file="$locker_stamp/msmtp.cfg.$$"
mail_stamp="sent_by_email"

smtp_enabled=`uci -q get user_notify.smtp.enable`
mail_to=`uci -q get user_notify.smtp.to`
mail_from=`uci -q get user_notify.smtp.from`
lang="$(uci -q get foris.settings.lang || echo $default_lang)" # Auto-detect from system configuration somehow?

create_msmtp_config() {
	local turris_smtp=`uci -q get user_notify.smtp.use_turris_smtp`

	echo "account notifier" > "$msmtp_cfg_file"
	
	if [ -n "$turris_smtp" ] && [ "$turris_smtp" = "1" ]; then
	   use_turris_smtp 
	else
	    parse_user_server_setting
	fi

	echo "timeout 5" >> "$msmtp_cfg_file"
	echo "account default: notifier" >> "$msmtp_cfg_file"
}

use_turris_smtp() {
	mail_from="$(uci -q get user_notify.smtp.sender_name | cut -d '@' -f1)@notify.turris.cz"
	local username=`atsha204cmd serial-number`
	local password=`echo "efefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefef" \
			| atsha204cmd challenge-response \
			| awk '{print tolower($0)}'`

	local server="smtp.turris.cz"
	local port="465"

	echo "from $mail_from" >> "$msmtp_cfg_file"
	echo "host $server" >> "$msmtp_cfg_file"
	echo "port $port" >> "$msmtp_cfg_file"
	echo "tls on" >> "$msmtp_cfg_file"
	echo "tls_certcheck off" >> "$msmtp_cfg_file"
	echo "tls_starttls off" >> "$msmtp_cfg_file"	  
	echo "auth on" >> "$msmtp_cfg_file"
	echo "user $username" >> "$msmtp_cfg_file"
	echo "password $password" >> "$msmtp_cfg_file"

}

parse_user_server_setting() {
	local username=`uci -q get user_notify.smtp.username`
	local password=`uci -q get user_notify.smtp.password`
	local server=`uci -q get user_notify.smtp.server`
	local port=`uci -q get user_notify.smtp.port`
	local security=`uci -q get user_notify.smtp.security`

	echo "from $mail_from" >> "$msmtp_cfg_file"
	echo "host $server" >> "$msmtp_cfg_file"
	echo "port $port" >> "$msmtp_cfg_file"

	if [ "$security" = "ssl" ]; then
		echo "tls on" >> "$msmtp_cfg_file"
		echo "tls_certcheck off" >> "$msmtp_cfg_file"
		echo "tls_starttls off" >> "$msmtp_cfg_file"
	elif [ "$security" = "starttls" ] ; then
		echo "tls on" >> "$msmtp_cfg_file"
		echo "tls_certcheck off" >> "$msmtp_cfg_file"
		echo "tls_starttls on" >> "$msmtp_cfg_file"	  
	else
		echo "tls off" >> "$msmtp_cfg_file"
	fi
	
	if [ -n "$username" ] && [ -n "$password" ]; then
		echo "auth on" >> "$msmtp_cfg_file"
		echo "user $username" >> "$msmtp_cfg_file"
		echo "password $password" >> "$msmtp_cfg_file"
	else
		echo "auth off" >> "$msmtp_cfg_file"
	fi
}

schedule_restart() {
	local max_delay=10 
	local delay=`uci -q get user_notify.reboot.delay`
	local time=`uci -q get user_notify.reboot.time | tr -d ':'`
	local curr_time=`$date_cmd +"%H%M"`

	if [ $delay -gt $max_delay ]; then
		delay=$max_delay
		uci set user_notify.reboot.delay=$max_delay
		uci commit
	elif [ $delay -le 0 ] && [ $curr_time -ge $time ]; then
		delay=1
	fi

	local curr_date=`$date_cmd '+%y%m%d'`
	local wanted_time="$(($curr_date + $delay))$time"

	echo "reboot" | at -t $($date_cmd +"%y%m%d%H%M" -d "$wanted_time")
	if [ "$lang" = "cs" ]; then
		echo -e "Zařízení bude automaticky restartováno dne $($date_cmd +'%d. %m. %Y v %H:%M' -d $wanted_time).\n" >> $1
	else
		echo -e "The device will be restarted automatically on $($date_cmd +'%A, %B %e at %I:%M %p' -d $wanted_time).\n" >> $1
	fi
}

compose_message() {
	rm -rf "$msg_file"* > /dev/null 2>&1 || true
	rm -rf "$locker_stamp/stamps"* > /dev/null 2>&1 || true

	local severity=`uci -q get user_notify.notifications.severity`
	local news=`uci -q get user_notify.notifications.news`
	
	local curr_date=`$date_cmd -R`
	local date_time=`$date_cmd +'%y%m%d.%H%M%S'`
	local rand=`tr -dc A-Za-z0-9 < /dev/urandom 2>/dev/null | head -c8`
	local domain=`uci -q get user_notify.smtp.from | cut -d '@' -f2`
	local msg_id="<$date_time.$rand@$domain>"
	local hostname=`cat /proc/sys/kernel/hostname`
	if [ "$lang" = "cs" ]; then
		local mail_subject="=?utf-8?Q?Upozorn=C4=9Bn=C3=AD?= od =?utf-8?Q?Va=C5=A1eho?= routeru $hostname"
		local heading_restart="Žádosti o restart zařízení"
		local heading_errors="Oznámení o chybách"
		local heading_updates="Oznámení o aktualizacích"
		local heading_news="Oznámení o novinkách"
	else
		local mail_subject="Notification from your router $hostname"
		local heading_restart="Restart is needed"
		local heading_errors="Error notifications"
		local heading_updates="Update notifications"
		local heading_news="News announcements"
	fi

	local msg_list=`ls "$base_folder"`
	for msg in $msg_list; do
		echo "Working on message: $msg"
		[ -f "$base_folder/$msg/$mail_stamp" ] && continue

		if [ -f "$base_folder/$msg/severity" ]; then
			local msg_severity=`cat "$base_folder/$msg/severity"`

			case "$msg_severity" in
				restart|error|update)
					msg_suffix="${msg_severity}s"
					;;
				news|test)
					msg_suffix="$msg_severity"
					;;
				*) echo "Unknown severity: $msg_severity"
				;;
			esac

			echo -e "$(cat "$base_folder/$msg/message_$lang" || cat "$base_folder/$msg/message_$default_lang" || cat "$base_folder/$msg/message")\n" 2>/dev/null >> "$msg_file.$msg_suffix"
			echo "$msg" >> "$locker_stamp/stamps.$msg_suffix"
		fi
	done

	if [ -f "$msg_file.restarts" ]; then
		schedule_restart "$msg_file.restarts"
	fi

	if [ -f "$msg_file.test" ]; then
		cat "$locker_stamp/stamps.test" >> "$locker_stamp/stamps"

		cat "$msg_file.test" >> "$msg_file.tmp"
	fi
	if [ -f "$msg_file.restarts" ]; then
		cat "$locker_stamp/stamps.restarts" >> "$locker_stamp/stamps"

		if [ "$severity" -ge 1 ]; then
			echo -e "##### $heading_restart #####" >> "$msg_file.tmp"
			cat "$msg_file.restarts" >> "$msg_file.tmp"
		fi
	fi
	if [ -f "$msg_file.errors" ]; then
		cat "$locker_stamp/stamps.errors" >> "$locker_stamp/stamps"

		if [ "$severity" -ge 2 ]; then
			echo -e "##### $heading_errors #####" >> "$msg_file.tmp"
			cat "$msg_file.errors" >> "$msg_file.tmp"
		fi
	fi
	if [ -f "$msg_file.news" ]; then
		cat "$locker_stamp/stamps.news" >> "$locker_stamp/stamps"

		if [ "$news" -gt 0 ]; then
			echo -e "##### $heading_news #####" >> "$msg_file.tmp"
			cat "$msg_file.news" >> "$msg_file.tmp"
		fi
	fi
	if [ -f "$msg_file.updates" ]; then
		cat "$locker_stamp/stamps.updates" >> "$locker_stamp/stamps"

		if [ "$severity" -ge 3 ]; then
			echo -e "##### $heading_updates #####" >> "$msg_file.tmp"
			cat "$msg_file.updates" >> "$msg_file.tmp"
		fi
	fi

	if [ -f "$msg_file.tmp" ]; then
		echo "To: $(echo $mail_to | sed 's/ /, /')" > "$msg_file"
		echo "From: $mail_from" >> "$msg_file"
		echo "Content-Type: text/plain; charset=UTF-8" >> "$msg_file"
		echo "Date: $curr_date" >> "$msg_file"
		echo "Message-ID: $msg_id" >> "$msg_file"
		echo -e "Subject: $mail_subject\n" >> "$msg_file"
		cat $msg_file.tmp >> "$msg_file"
	fi

}

lock() {
	# Try to acquire the lock. But only for a limited amount of time
	# (15 minutes) to prevent too many waiting notifiers to gather in
	# case something bad happens. It is started every 5 minutes anyway.
	for i in `seq 1 900` ; do
		if mkdir "$1" >/dev/null 2>&1 ; then
			return
		fi
		sleep 1
	done
	echo "Failed to get the lock" >&2
	exit 1
}

unlock() {
	rm -rf "$1"
}

mark_msgs() {
	for msg in `cat "$locker_stamp/stamps"`; do
		touch "$base_folder/$msg/$mail_stamp"
	done
}

send_mail() {
	lock "$locker_stamp"
	trap 'unlock "$locker_stamp"' EXIT ABRT QUIT TERM HUP INT QUIT ILL TRAP BUS FPE SEGV PIPE ALRM

	create_msmtp_config
	compose_message

	if [ ! -f "$msg_file" ]; then
		[ -f "$locker_stamp/stamps" ] && mark_msgs
		unlock "$locker_stamp"
		echo "There is no message to send."
		exit 0
	fi

	if [ "$smtp_enabled" -eq 0 ]; then
		mark_msgs
		echo "User notifications are not enabled."
	else
		cat "$msg_file" | msmtp -C "$msmtp_cfg_file" -t
		local err_lvl=$?

		if [ "$err_lvl" -eq 0 ]; then
			mark_msgs
		else
			unlock "$locker_stamp"
			exit "$err_lvl"
		fi
	fi

	unlock "$locker_stamp"
}

send_mail

exec user-notify-cleaner
